data$risk_base<-1-as.numeric(summary(fit1,times=5)$surv)
fit2<-survfit(augmented_model_2,newdata=data)
data$risk_augmented_2<-1-as.numeric(summary(fit2,times=5)$surv)
fit2<-survfit(augmented_model_2,newdata=data)
data$risk_augmented<-1-as.numeric(summary(fit2,times=5)$surv)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2) # For plotting
library(dplyr) # For data handling
library(readr)
library(survival) # Main library, used for implementing Cox Modeling
library(pROC) # For plotting ROC curves
library(survminer)
library(utils) #For not having to upload the txt each time
library(riskRegression) # For performance indicators
#setwd('~/Desktop/Data Science/Data Science Lab in Medicine/Big Data in Health Care/')
url <- "https://raw.githubusercontent.com/darthgween/BigDataInHealthCareProject/main/heart.valve.txt?token=GHSAT0AAAAAACR3GYSXO5Z3ARKVQY2S6SYSZRYZQWA"
data <- read.table(url, header = TRUE)
head(data)
data$sex <- factor(data$sex, levels = c(0, 1), labels = c("Male", "Female"))
data$con.cabg <- factor(data$con.cabg, levels = c(0, 1), labels = c("No", "Yes"))
data$lv <- factor(data$lv, levels = c(1, 2, 3), labels = c("High", "Moderate", "Low"))
data$sten.reg.mix <- factor(data$sten.reg.mix, levels = c(1, 2, 3), labels = c("Stenosis", "Regurgitation", "Mixed"))
ggplot(data, aes(x = factor(status), y = log.lvmi, fill = factor(status))) +
geom_boxplot() +
ggtitle("Boxplot of log.lvmi for Status") +
xlab("Status") +
ylab("log.lvmi") +
scale_fill_discrete(name = "Status")
dim(data)
str(data)
summary(data)
ggplot(data, aes(x = age)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
ggtitle("Distribuzione dell'etÃ ") +
xlab("EtÃ ") +
ylab("Frequenza")
sum_males <- sum(data$sex == "Male")
sum_females <- sum(data$sex == "Female")
cat("Number of males:", sum_males, "\n")
cat("Number of females:", sum_females, "\n")
ggplot(data, aes(x = sex, fill = sex)) +
geom_bar() +
scale_fill_manual(values = c("Male" = "blue", "Female" = "pink")) +
xlab("Sex") +
ylab("Count") +
ggtitle("Distribution by Sex") +
theme_minimal()
#cor_matrix <- cor(data)
#print(cor_matrix)
#if (!require(corrplot)) {
install.packages("corrplot")
library(corrplot)
#}
#corrplot(cor_matrix, method = "circle")
ggplot(data, aes(x = age, y = log.lvmi)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", color = "red", se = FALSE) +
ggtitle("Scatter Plot: etÃ  vs log.lvmi") +
xlab("EtÃ ") +
ylab("log.lvmi")
# The outcome variable is a survival object created with the time to event (fuyrs) and status indicator (status)
surv_obj <- Surv(data$fuyrs, data$status)
# Perform Cox regression for each predictor
# Excluding paz.id from the analysis as it's an identifier, not a predictor
variables <- c("log.lvmi", "sex", "age", "con.cabg", "creat", "lv", "sten.reg.mix")
# Store results in a list for easy access
univariate_models <- list()
for (var in variables) {
# Formula to dynamically create the regression model
formula <- as.formula(paste("surv_obj ~", var))
# Fit the Cox model
model <- coxph(formula, data = data)
# Print the summary of the model
print(summary(model))
# Store the model in the list
univariate_models[[var]] <- model
}
univariate_models[["log.lvmi"]]
univariate_models[["sex"]]
univariate_models[["age"]]
univariate_models[["con.cabg"]]
univariate_models[["creat"]]
univariate_models[["lv"]]
univariate_models[["sten.reg.mix"]]
base_model <- coxph(Surv(fuyrs, status) ~ sex + age + con.cabg + creat + lv + sten.reg.mix, data = data, x=T)
summary(base_model)
# Evaluate the proportional hazards assumption using cox.zph function
# This function performs a test of proportional hazards based on the scaled Schoenfeld residuals
ph_test <- cox.zph(base_model)
# Plotting the residuals to visually inspect any trend indicating non-proportionality
plot(ph_test)  # Multiple plots if more than one covariate; assess each plot for trends over time
# Output the global test of proportional hazards from cox.zph
print(ph_test) # This will display the test statistics and p-values for each covariate
# Check the linearity of continuous variables using Martingale residuals from a null model
null_model <- coxph(Surv(fuyrs, status) ~ 1, data = data) # Null model with no covariates
# Selecting continuous variables to check for non-linearity
continuous_vars <- c("age", "creat")
# Plot Martingale residuals against each continuous variable
for(var in continuous_vars) {
# Plot residuals against continuous variables
plot(data[[var]], residuals(null_model, type = "martingale"), xlab = var, ylab = "Martingale residuals", main = paste("Linearity Check for", var))
abline(h = 0, col = "red")  # Horizontal line at zero to aid in visual assessment
}
augmented_model <- coxph(Surv(fuyrs, status) ~ sex + age + con.cabg + creat + lv + sten.reg.mix + log.lvmi, data = data, x=T)
summary(augmented_model)
# Evaluate the proportional hazards assumption using cox.zph function
# This function performs a test of proportional hazards based on the scaled Schoenfeld residuals
ph_test_augmented <- cox.zph(augmented_model)
# Plotting the residuals to visually inspect any trend indicating non-proportionality
plot(ph_test_augmented)  # Multiple plots if more than one covariate; assess each plot for trends over time
# Output the global test of proportional hazards from cox.zph
print(ph_test_augmented) # This will display the test statistics and p-values for each covariate
# Selecting continuous variables to check for non-linearity
continuous_vars_augmented <- c("age", "creat", "log.lvmi")  # Now including log.lvmi
# Plot Martingale residuals against each continuous variable
for(var in continuous_vars_augmented) {
# Plot residuals against continuous variables
plot(data[[var]], residuals(null_model, type = "martingale"), xlab = var, ylab = "Martingale residuals", main = paste("Linearity Check for", var))
abline(h = 0, col = "red")  # Horizontal line at zero to aid in visual assessment
}
# Categorize log.lvmi into tertiles or quartiles
data$log.lvmi_cat <- cut(data$log.lvmi, breaks = quantile(data$log.lvmi, probs = seq(0, 1, by = 0.25)), include.lowest = TRUE)
# Fit the Cox model with stratification by log.lvmi categories
stratified_model <- coxph(Surv(fuyrs, status) ~ sex + age + con.cabg + creat + lv + sten.reg.mix + strata(log.lvmi_cat), data = data)
summary(stratified_model)
# Check proportional hazards assumption
cox.zph_stratified <- cox.zph(stratified_model)
print(cox.zph_stratified)
# Evaluate the proportional hazards assumption using the cox.zph function
# This function tests the proportional hazards assumption based on the scaled Schoenfeld residuals
ph_test_2 <- cox.zph(stratified_model)
# Plotting the residuals to visually inspect any trend indicating non-proportionality
plot(ph_test_2)  # This generates multiple plots if there are multiple covariates
# Print the global test of proportional hazards
print(ph_test_2) # Displays test statistics and p-values for each covariate
fit1<-survfit(base_model,newdata=data)
data$risk_base<-1-as.numeric(summary(fit1,times=5)$surv)
fit1<-survfit(base_model,newdata=data)
data$risk_base<-1-as.numeric(summary(fit1,times=5)$surv)
fit2<-survfit(augmented_model_2,newdata=data)
fit2<-survfit(augmented_model,newdata=data)
data$risk_augmented<-1-as.numeric(summary(fit2,times=5)$surv)
fit3<-survfit(stratified_model,newdata=data)
data$risk_augmented_strata<-1-as.numeric(summary(fit3,times=5)$surv)
score <- Score(list("Base"=base_model,"Augmented"=augmented_model_2),
formula=Surv(fuyrs, status==1)~1,
data=data,conf.int=T,
times=seq(1,5,1),
plots=c("calibration","ROC"))
score <- Score(list("Base"=base_model,"Augmented"=augmented_model, "Poly"=augmented_model_poly),
formula=Surv(fuyrs, status==1)~1,
data=data,conf.int=T,
times=seq(1,5,1),
plots=c("calibration","ROC"))
score <- Score(list("Base"=base_model,"Augmented"=augmented_model,"Stratified"=stratified_model),
formula=Surv(fuyrs, status==1)~1,
data=data,conf.int=T,
times=seq(1,5,1),
plots=c("calibration","ROC"))
# Categorize log.lvmi into tertiles or quartiles
data$log.lvmi_cat <- cut(data$log.lvmi, breaks = quantile(data$log.lvmi, probs = seq(0, 1, by = 0.25)), include.lowest = TRUE)
# Fit the Cox model with stratification by log.lvmi categories
stratified_model <- coxph(Surv(fuyrs, status) ~ sex + age + con.cabg + creat + lv + sten.reg.mix + strata(log.lvmi_cat), data = data. x=T)
score <- Score(list("Base"=base_model,"Augmented"=augmented_model,"Stratified"=stratified_model),
formula=Surv(fuyrs, status==1)~1,
data=data,conf.int=T,
times=seq(1,5,1),
plots=c("calibration","ROC"))
# Categorize log.lvmi into tertiles or quartiles
data$log.lvmi_cat <- cut(data$log.lvmi, breaks = quantile(data$log.lvmi, probs = seq(0, 1, by = 0.25)), include.lowest = TRUE)
# Fit the Cox model with stratification by log.lvmi categories
stratified_model <- coxph(Surv(fuyrs, status) ~ sex + age + con.cabg + creat + lv + sten.reg.mix + strata(log.lvmi_cat), data = data x=T)
# Categorize log.lvmi into tertiles or quartiles
data$log.lvmi_cat <- cut(data$log.lvmi, breaks = quantile(data$log.lvmi, probs = seq(0, 1, by = 0.25)), include.lowest = TRUE)
# Fit the Cox model with stratification by log.lvmi categories
stratified_model <- coxph(Surv(fuyrs, status) ~ sex + age + con.cabg + creat + lv + sten.reg.mix + strata(log.lvmi_cat), data = data, x=T)
summary(stratified_model)
# Check proportional hazards assumption
cox.zph_stratified <- cox.zph(stratified_model)
print(cox.zph_stratified)
score <- Score(list("Base"=base_model,"Augmented"=augmented_model,"Stratified"=stratified_model),
formula=Surv(fuyrs, status==1)~1,
data=data,conf.int=T,
times=seq(1,5,1),
plots=c("calibration","ROC"))
plotCalibration(score,times=5,cens.method="local",method="quantile",q=10)
title(main="Calibration Plot at 5 years")
plotROC(score,times=5,cens.method="local")
title(main="time-dependent ROC at 5 years")
CVscore <- Score(list("Base"=base_model,"Augmented"=augmented_model,"Stratified"=stratified_model),
formula=Surv(fuyrs, status==1)~1,
data=data,conf.int=T,
times=seq(1,5,1),
split.method="loob",B=100,seed=1000)
summary(CVscore)
type_subjects <- data.frame(
sex = c(0, 1, 0),
age = c(60, 70, 65),
con.cabg = c(1, 0, 1),
creat = c(100, 150, 120),
lv = c(1, 2, 3),
sten.reg.mix = c(1, 2, 3),
log.lvmi = c(log(150), log(170), log(160))
)
# Predict event risk at 5 years using both models
risk_basic <- predict(base_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
library(survival)
library(survminer)
# Fit the models
fit1 <- survfit(base_model, newdata=data)
fit2 <- survfit(augmented_model, newdata=data)
fit3 <- survfit(augmented_model_poly, newdata=data)
library(survival)
library(survminer)
# Fit the models
fit1 <- survfit(base_model, newdata=data)
fit2 <- survfit(augmented_model, newdata=data)
fit3 <- survfit(stratified_model, newdata=data)
# Calculate risk for each model
data$risk_base <- 1 - as.numeric(summary(fit1, times=5)$surv)
data$risk_augmented <- 1 - as.numeric(summary(fit2, times=5)$surv)
data$risk_augmented_strata <- 1 - as.numeric(summary(fit3, times=5)$surv)
# Calculate Concordance Index (C-index)
cindex_base <- summary(base_model)$concordance
cindex_augmented <- summary(augmented_model)$concordance
cindex_stratified <- summary(stratified_model)$concordance
cindex_base
cindex_augmented
cindex_augmented_poly
library(survival)
library(survminer)
# Fit the models
fit1 <- survfit(base_model, newdata=data)
fit2 <- survfit(augmented_model, newdata=data)
fit3 <- survfit(stratified_model, newdata=data)
# Calculate risk for each model
data$risk_base <- 1 - as.numeric(summary(fit1, times=5)$surv)
data$risk_augmented <- 1 - as.numeric(summary(fit2, times=5)$surv)
data$risk_augmented_strata <- 1 - as.numeric(summary(fit3, times=5)$surv)
# Calculate Concordance Index (C-index)
cindex_base <- summary(base_model)$concordance
cindex_augmented <- summary(augmented_model)$concordance
cindex_stratified <- summary(stratified_model)$concordance
cindex_base
cindex_augmented
cindex_stratified
# Plot Kaplan-Meier Curves
#ggsurvplot(fit1, data = data, risk.table = TRUE, title = "Base Model")
#ggsurvplot(fit2, data = data, risk.table = TRUE, title = "Augmented Model")
#ggsurvplot(fit4, data = data, risk.table = TRUE, title = "Stratified Model")
# Perform Likelihood Ratio Test
anova(base_model, augmented_model, augmented_model_poly, stratified_model, test="LRT")
library(survival)
library(survminer)
# Fit the models
fit1 <- survfit(base_model, newdata=data)
fit2 <- survfit(augmented_model, newdata=data)
fit3 <- survfit(stratified_model, newdata=data)
# Calculate risk for each model
data$risk_base <- 1 - as.numeric(summary(fit1, times=5)$surv)
data$risk_augmented <- 1 - as.numeric(summary(fit2, times=5)$surv)
data$risk_augmented_strata <- 1 - as.numeric(summary(fit3, times=5)$surv)
# Calculate Concordance Index (C-index)
cindex_base <- summary(base_model)$concordance
cindex_augmented <- summary(augmented_model)$concordance
cindex_stratified <- summary(stratified_model)$concordance
cindex_base
cindex_augmented
cindex_stratified
# Plot Kaplan-Meier Curves
#ggsurvplot(fit1, data = data, risk.table = TRUE, title = "Base Model")
#ggsurvplot(fit2, data = data, risk.table = TRUE, title = "Augmented Model")
#ggsurvplot(fit4, data = data, risk.table = TRUE, title = "Stratified Model")
# Perform Likelihood Ratio Test
anova(base_model, augmented_model, stratified_model, test="LRT")
# Calculate AIC
aic_base <- AIC(base_model)
aic_augmented <- AIC(augmented_model)
aic_stratified <- AIC(stratified_model)
aic_base
aic_augmented
aic_stratified
# indicator of death within 5 year
data$status.5y<-ifelse(data$fuyrs<=5,1,0)
# Brier Score
(BS_base <- mean((data$status.5y - data$risk_base) ^ 2))
(BS_augmented <- mean((data$status.5y - data$risk_augmented) ^ 2))
(BS_poly <- mean((data$status.5y - data$risk_augmented_poly) ^ 2))
(BS_strata <- mean((data$status.5y - data$risk_augmented_strata) ^ 2))
# indicator of death within 5 year
data$status.5y<-ifelse(data$fuyrs<=5,1,0)
# Brier Score
(BS_base <- mean((data$status.5y - data$risk_base) ^ 2))
(BS_augmented <- mean((data$status.5y - data$risk_augmented) ^ 2))
(BS_strata <- mean((data$status.5y - data$risk_augmented_strata) ^ 2))
#????? Calculation of Model Improvement over Random Guessing Using Brier Scores
BS_basesc  <- mean(data$risk_base*(1-data$risk_base))
BS_augmentedsc <- mean(data$risk_augmented*(1-data$risk_augmented))
BS_base-BS_basesc
BS_augmented-BS_augmentedsc
###TO DELETE
roc1<-roc(data$status.5y, data$risk_base)
plot(1 - roc1$specificities, roc1$sensitivities,
type = 'l', ylab = 'TPF', xlab = 'FPF', lwd = 3, xaxt = "n", yaxt = "n",
xlim = c(0,1), cex.lab = 1.7, frame = F)
axis(1, at = c(0,0.25,0.5,0.75,1), labels = NA, pos = 0)
axis(1, at = c(0,0.25,0.5,0.75,1), labels = c(0,0.25,0.5,0.75,1), cex.axis = 1.7, pos = 0)
axis(2, at = c(0,0.25,0.5,0.75,1), labels = c(0,0.25,0.5,0.75,1), cex.axis = 1.7, pos = 0)
Youden1<-roc1$sensitivities+roc1$specificities-1
optimal.cut.off1<-roc1$thresholds[Youden1==max(Youden1)]
cbind(optimal.cut.off1,Youden=max(Youden1))
points(1-roc1$specificities[roc1$thresholds==optimal.cut.off1],roc1$sensitivities[roc1$thresholds==optimal.cut.off1],pch=0,cex=1.7)
roc2<-roc(data$status.5y, data$risk_augmented)
lines(1 - roc2$specificities, roc2$sensitivities,
lwd = 3, lty = 3)
Youden2<-roc2$sensitivities+roc2$specificities-1
optimal.cut.off2<-roc2$thresholds[Youden2==max(Youden2)]
cbind(optimal.cut.off2,Youden=max(Youden2))
points(1-roc2$specificities[roc2$thresholds==optimal.cut.off2],roc2$sensitivities[roc2$thresholds==optimal.cut.off2],pch=0,cex=1.7)
# Chance line:
abline(a=0, b=1, lty = 2, lwd = 2)
lines(c(0,1), c(1,1), lty = 1)
lines(c(1,1), c(0,1), lty = 1)
legend(x = 0, y = 1, c("model1","model2"), lwd = c(3,3), lty = c(1,3), bty = 'n', cex = 1.7)
# Create example subjects
type_subjects <- data.frame(
sex = c("Male", "Male", "Male"),
age = c(70, 80, 70),
con.cabg = c("No", "Yes", "Yes"),
creat = c(130, 150, 130),
lv = c("Moderate", "High", "Moderate"),
sten.reg.mix = c("Mixed", "Mixed", "Mixed"),
log.lvmi = c(log(160), log(200), log(160))
)
# Predict survival probabilities at 5 years for base model
surv_base <- survfit(base_model, newdata = type_subjects)
risk_base_5yr <- 1-summary(surv_base, times = 5)$surv
risk_base_5yr
# Predict survival probabilities at 5 years for augmented model
surv_augmented <- survfit(augmented_model_poly, newdata = type_subjects)
# Prediction of event risk at a fixed time-point (e.g., 5 years) for 3 "type" subjects
# Create example subjects
type_subjects <- data.frame(
sex = c("Male", "Female", "Male"),
age = c(100, 70, 65),
con.cabg = c("Yes", "No", "Yes"),
creat = c(100, 150, 120),
lv = c("High", "Moderate", "Low"),
sten.reg.mix = c("Stenosis", "Regurgitation", "Mixed"),
log.lvmi = c(log(150), log(170), log(160))
)
# Predict event risk at 5 years using both models
risk_basic <- predict(base_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
risk_augmented_2 <- predict(augmented_model_poly, newdata = type_subjects, type = "risk", se.fit = TRUE)
# Prediction of event risk at a fixed time-point (e.g., 5 years) for 3 "type" subjects
# Create example subjects
type_subjects <- data.frame(
sex = c("Male", "Female", "Male"),
age = c(100, 70, 65),
con.cabg = c("Yes", "No", "Yes"),
creat = c(100, 150, 120),
lv = c("High", "Moderate", "Low"),
sten.reg.mix = c("Stenosis", "Regurgitation", "Mixed"),
log.lvmi = c(log(150), log(170), log(160))
)
# Predict event risk at 5 years using both models
risk_basic <- predict(base_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
risk_augmented <- predict(augmented_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
risk_basic
risk_augmented_2
# Prediction of event risk at a fixed time-point (e.g., 5 years) for 3 "type" subjects
# Create example subjects
type_subjects <- data.frame(
sex = c("Male", "Female", "Male"),
age = c(100, 70, 65),
con.cabg = c("Yes", "No", "Yes"),
creat = c(100, 150, 120),
lv = c("High", "Moderate", "Low"),
sten.reg.mix = c("Stenosis", "Regurgitation", "Mixed"),
log.lvmi = c(log(150), log(170), log(160))
)
# Predict event risk at 5 years using both models
risk_basic <- predict(base_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
risk_augmented <- predict(augmented_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
risk_basic
risk_augmented
# Prediction of event risk at a fixed time-point (e.g., 5 years) for 3 "type" subjects
# Create example subjects
type_subjects <- data.frame(
sex = c("Male", "Female", "Male"),
age = c(100, 70, 65),
con.cabg = c("Yes", "No", "Yes"),
creat = c(100, 150, 120),
lv = c("High", "Moderate", "Low"),
sten.reg.mix = c("Stenosis", "Regurgitation", "Mixed"),
log.lvmi = c(log(150), log(170), log(160))
)
# Predict event risk at 5 years using both models
risk_basic <- predict(base_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
risk_augmented <- predict(augmented_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
risk_strata <- predict(stratified_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
head(data)
# Prediction of event risk at a fixed time-point (e.g., 5 years) for 3 "type" subjects
# Create example subjects
type_subjects <- data.frame(
sex = c("Male", "Female", "Male"),
age = c(100, 70, 65),
con.cabg = c("Yes", "No", "Yes"),
creat = c(100, 150, 120),
lv = c("High", "Moderate", "Low"),
sten.reg.mix = c("Stenosis", "Regurgitation", "Mixed"),
log.lvmi = c(log(150), log(170), log(160))
)
type_subjects_strat <- data.frame(
sex = c("Male", "Female", "Male"),
age = c(100, 70, 65),
con.cabg = c("Yes", "No", "Yes"),
creat = c(100, 150, 120),
lv = c("High", "Moderate", "Low"),
sten.reg.mix = c("Stenosis", "Regurgitation", "Mixed"),
log.lvmi = c(log(150), log(170), log(160))
)
type_subjects_strat$log.lvmi_cat <- cut(type_subjects_strat$log.lvmi, breaks = quantile(data$log.lvmi, probs = seq(0, 1, by = 0.25)), include.lowest = TRUE)
# Predict event risk at 5 years using both models
risk_basic <- predict(base_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
risk_augmented <- predict(augmented_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
risk_strata <- predict(stratified_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
# Prediction of event risk at a fixed time-point (e.g., 5 years) for 3 "type" subjects
# Create example subjects
type_subjects <- data.frame(
sex = c("Male", "Female", "Male"),
age = c(100, 70, 65),
con.cabg = c("Yes", "No", "Yes"),
creat = c(100, 150, 120),
lv = c("High", "Moderate", "Low"),
sten.reg.mix = c("Stenosis", "Regurgitation", "Mixed"),
log.lvmi = c(log(150), log(170), log(160))
)
type_subjects_strat <- data.frame(
sex = c("Male", "Female", "Male"),
age = c(100, 70, 65),
con.cabg = c("Yes", "No", "Yes"),
creat = c(100, 150, 120),
lv = c("High", "Moderate", "Low"),
sten.reg.mix = c("Stenosis", "Regurgitation", "Mixed"),
log.lvmi = c(log(150), log(170), log(160))
)
type_subjects_strat$log.lvmi_cat <- cut(type_subjects_strat$log.lvmi, breaks = quantile(data$log.lvmi, probs = seq(0, 1, by = 0.25)), include.lowest = TRUE)
# Predict event risk at 5 years using both models
risk_basic <- predict(base_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
risk_augmented <- predict(augmented_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
risk_strata <- predict(stratified_model, newdata = type_subjects_strat, type = "risk", se.fit = TRUE)
risk_basic
risk_augmented
risk_strata
# Prediction of event risk at a fixed time-point (e.g., 5 years) for 3 "type" subjects
# Create example subjects
type_subjects <- data.frame(
sex = c("Male", "Female", "Male"),
age = c(100, 70, 65),
con.cabg = c("Yes", "No", "Yes"),
creat = c(100, 150, 120),
lv = c("High", "Moderate", "Low"),
sten.reg.mix = c("Stenosis", "Regurgitation", "Mixed"),
log.lvmi = c(log(150), log(170), log(160))
)
type_subjects_strat <- data.frame(
sex = c("Male", "Female", "Male"),
age = c(100, 70, 65),
con.cabg = c("Yes", "No", "Yes"),
creat = c(100, 150, 120),
lv = c("High", "Moderate", "Low"),
sten.reg.mix = c("Stenosis", "Regurgitation", "Mixed"),
log.lvmi = c(log(150), log(170), log(160))
)
type_subjects_strat$log.lvmi_cat <- cut(type_subjects_strat$log.lvmi, breaks = quantile(data$log.lvmi, probs = seq(0, 1, by = 0.25)), include.lowest = TRUE)
# Predict event risk at 5 years using both models
risk_basic <- predict(base_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
risk_augmented <- predict(augmented_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
risk_strata <- predict(stratified_model, newdata = type_subjects_strat, type = "risk", se.fit = TRUE)
risk_basic
risk_augmented
risk_strata
log(150)
# Prediction of event risk at a fixed time-point (e.g., 5 years) for 3 "type" subjects
# Create example subjects
type_subjects <- data.frame(
sex = c("Male", "Female", "Male"),
age = c(100, 70, 65),
con.cabg = c("Yes", "No", "Yes"),
creat = c(100, 150, 120),
lv = c("High", "Moderate", "Low"),
sten.reg.mix = c("Stenosis", "Regurgitation", "Mixed"),
log.lvmi = c(log(150), log(170), log(160))
)
type_subjects_strat <- data.frame(
sex = c("Male", "Female", "Male"),
age = c(100, 70, 65),
con.cabg = c("Yes", "No", "Yes"),
creat = c(100, 150, 120),
lv = c("High", "Moderate", "Low"),
sten.reg.mix = c("Stenosis", "Regurgitation", "Mixed"),
log.lvmi = c(log(150), log(170), log(160))
)
type_subjects_strat$log.lvmi_cat <- cut(type_subjects_strat$log.lvmi, breaks = quantile(data$log.lvmi, probs = seq(0, 1, by = 0.25)), include.lowest = TRUE)
# Predict event risk at 5 years using both models
risk_basic <- predict(base_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
risk_augmented <- predict(augmented_model, newdata = type_subjects, type = "risk", se.fit = TRUE)
risk_strata <- predict(stratified_model, newdata = type_subjects_strat, type = "risk", se.fit = TRUE)
risk_basic
risk_augmented
risk_strata
