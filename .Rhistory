```{r}
file_path <- "https://github.com/darthgween/BigDataInHealthCareProject/blob/main/heart.valve.txt"
data <- read_delim(file_path, delim = "\t")
library(ggplot2)
library(dplyr)
library(readr)
library(survival)
library(survminer)
library(randomForestSRC)
library(gbm)
file_path <- "https://github.com/darthgween/BigDataInHealthCareProject/blob/main/heart.valve.txt"
data <- read_delim(file_path, delim = "\t")
data <- read_csv(file_path, delim = "\t")
data <- read_csv(file_path)
plot(ph_test)  # This plots the Schoenfeld residuals for each covariate
### STEP 0: load libraries, etc
### STEP 1: Descriptive Statistics
### STEP 2: Univariate analysis (Cox model) of the association of each independent variable with the outcome under study
# Load necessary libraries
library(survival)
library(survminer)
# Read the dataset
data <- dataset
# Read the dataset
url <- "https://raw.githubusercontent.com/darthgween/BigDataInHealthCareProject/main/heart.valve.txt?token=GHSAT0AAAAAACR3GYSWOK6GYZRGKSSK3Z2CZRXTKPA"
data <- read.table(url, header = TRUE)
head(data)
# Convert factors to categorical variables if necessary
data$sex <- factor(data$sex, levels = c(0, 1), labels = c("Male", "Female"))
data$con.cabg <- factor(data$con.cabg, levels = c(0, 1), labels = c("No", "Yes"))
data$lv <- factor(data$lv, levels = c(1, 2, 3), labels = c("High", "Moderate", "Low"))
data$sten.reg.mix <- factor(data$sten.reg.mix, levels = c(1, 2, 3), labels = c("Stenosis", "Regurgitation", "Mixed"))
cox_log_lvmi <- coxph(Surv(fuyrs, status) ~ log.lvmi, data = data)
summary(cox_log_lvmi)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readr)
library(survival)
library(survminer)
library(corrplot)
library(utils) # For not having to load the txt each time
# This way we don't need to upload the txt file each time, it stays in the Github
file_path <- "https://raw.githubusercontent.com/darthgween/BigDataInHealthCareProject/main/heart.valve.txt?token=GHSAT0AAAAAACR3GYSWOK6GYZRGKSSK3Z2CZRXTKPA"
heart.valve <- read.table(url, header = TRUE)
head(heart.valve)
dim(heart.valve)
str(heart.valve)
summary(heart.valve)
library(dplyr)
library(corrplot)
# Escludo colonna "paz.id"
numeric_data <- heart.valve %>%
select(-paz.id) %>%
select_if(is.numeric)
# Compute correlation matrix
cor_matrix <- cor(numeric_data, use = "complete.obs")
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, addCoef.col = "black")
ggplot(heart.valve, aes(x = factor(status), y = log.lvmi, fill = factor(status))) +
geom_boxplot() +
ggtitle("Boxplot di log.lvmi per Status") +
xlab("Status (0 = Censored, 1 = Dead)") +
ylab("log.lvmi") +
scale_fill_discrete(name = "Status")
heart.valve$status <- factor(heart.valve$status, levels = c(0, 1), labels = c("Censored", "Dead"))
ggplot(heart.valve, aes(x = age, y = creat)) +
geom_point(aes(color = status), alpha = 0.6) +
geom_smooth(method = "lm", color = "red", se = FALSE) +
ggtitle("Scatter Plot: Age vs Creatinine by Status") +
xlab("Age") +
ylab("Creatinine") +
scale_color_manual(values = c("Censored" = "skyblue", "Dead" = "salmon"))
ggplot(heart.valve, aes(x = status, y = age, fill = factor(con.cabg))) +
geom_boxplot() +
ggtitle("Boxplot: Age by Status and CABG") +
xlab("Status (0 = Censored, 1 = Dead)") +
ylab("Age") +
scale_fill_manual(name = "CABG", labels = c("0" = "No", "1" = "Yes"), values = c("skyblue", "salmon"))
#livello di creatinina differenziata per status
ggplot(heart.valve, aes(x = factor(status), y = creat, fill = factor(status))) +
geom_boxplot() + xlab("Status") + ylab("Creatinine (µmol/mL)") +
scale_fill_manual(values = c("red", "green"), labels = c("Deceased", "Censored"))
# Crea lo scatter plot
ggplot(heart.valve, aes(x = age, y = fuyrs)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", se = TRUE, color = "red")
ggtitle("Scatter Plot tra Age e Fuyrs") +
xlab("Age") +
ylab("Fuyrs") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readr)
library(survival)
library(survminer)
library(randomForestSRC)
library(gbm)
library(utils) #For not having to upload the txt each time
#setwd('~/Desktop/Data Science/Data Science Lab in Medicine/Big Data in Health Care/')
url <- "https://raw.githubusercontent.com/darthgween/BigDataInHealthCareProject/main/heart.valve.txt?token=GHSAT0AAAAAACR3GYSWOK6GYZRGKSSK3Z2CZRXTKPA"
data <- read.table(url, header = TRUE)
head(data)
#TO EVALUATE
data$sex <- factor(data$sex, levels = c(0, 1), labels = c("Male", "Female"))
data$con.cabg <- factor(data$con.cabg, levels = c(0, 1), labels = c("No", "Yes"))
data$lv <- factor(data$lv, levels = c(1, 2, 3), labels = c("High", "Moderate", "Low"))
data$sten.reg.mix <- factor(data$sten.reg.mix, levels = c(1, 2, 3), labels = c("Stenosis", "Regurgitation", "Mixed"))
dim(data)
str(data)
summary(data)
ggplot(data, aes(x = age)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black") +
ggtitle("Distribuzione dell'età") +
xlab("Età") +
ylab("Frequenza")
cor_matrix <- cor(data, use = "complete.obs")
ggplot(data, aes(x = factor(status), y = log.lvmi, fill = factor(status))) +
geom_boxplot() +
ggtitle("Boxplot di log.lvmi per Status") +
xlab("Status") +
ylab("log.lvmi") +
scale_fill_discrete(name = "Status")
ggplot(data, aes(x = age, y = log.lvmi)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", color = "red", se = FALSE) +
ggtitle("Scatter Plot: età vs log.lvmi") +
xlab("Età") +
ylab("log.lvmi")
print(univariate_models[[4]]$variable)
univariate_models <- lapply(names(data)[-1], function(var) {
cox_model <- coxph(Surv(fuyrs, status) ~ data[[var]], data = data)
return(list(variable = var, model = cox_model))
})
for (item in univariate_models) {
print(item$variable)
print(summary(item$model))
}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readr)
library(survival)
library(survminer)
library(randomForestSRC)
library(gbm)
library(utils) #For not having to upload the txt each time
#setwd('~/Desktop/Data Science/Data Science Lab in Medicine/Big Data in Health Care/')
url <- "https://raw.githubusercontent.com/darthgween/BigDataInHealthCareProject/main/heart.valve.txt?token=GHSAT0AAAAAACR3GYSWOK6GYZRGKSSK3Z2CZRXTKPA"
data <- read.table(url, header = TRUE)
#setwd('~/Desktop/Data Science/Data Science Lab in Medicine/Big Data in Health Care/')
url <- "https://github.com/darthgween/BigDataInHealthCareProject/raw/main/heart.valve.txt"
data <- read.table(url, header = TRUE)
#setwd('~/Desktop/Data Science/Data Science Lab in Medicine/Big Data in Health Care/')
url <- "https://raw.githubusercontent.com/darthgween/BigDataInHealthCareProject/main/heart.valve.txt?token=GHSAT0AAAAAACR3GYSXO5Z3ARKVQY2S6SYSZRYZQWA"
data <- read.table(url, header = TRUE)
head(data)
data$sten.reg.mix <- factor(data$sten.reg.mix, levels = c(1, 2, 3), labels = c("Stenosis", "Regurgitation", "Mixed"))
#TO EVALUATE
data$sex <- factor(data$sex, levels = c(0, 1), labels = c("Male", "Female"))
data$con.cabg <- factor(data$con.cabg, levels = c(0, 1), labels = c("No", "Yes"))
data$lv <- factor(data$lv, levels = c(1, 2, 3), labels = c("High", "Moderate", "Low"))
data$sten.reg.mix <- factor(data$sten.reg.mix, levels = c(1, 2, 3), labels = c("Stenosis", "Regurgitation", "Mixed"))
# Define the survival object
surv_obj <- Surv(time = data$fuyrs, event = data$status)
# Initialize a list to store model results
model_results <- list()
# List of predictors for univariate analysis
predictors <- names(data)[!names(data) %in% c("paz.id", "fuyrs", "status")]
# Fit Cox model for each predictor
for (var in predictors) {
# Fit Cox model
cox_model <- coxph(surv_obj ~ data[[var]])
# Store model summary
model_results[[var]] <- summary(cox_model)
# Print the model summary
cat("Results for", var, ":\n")
print(cox_model)
print(summary(cox_model))
cat("\n\n")
}
# Function to run univariate Cox model and return summary
run_cox_model <- function(variable) {
formula <- as.formula(paste("Surv(fuyrs, status) ~", variable))
model <- coxph(formula, data = data)
summary(model)
}
# List of variables to test
variables <- c("log.lvmi", "sex", "age", "con.cabg", "creat", "lv", "sten.reg.mix")
# Apply the function to each variable and store results
model_results <- lapply(variables, run_cox_model)
head(data)
#setwd('~/Desktop/Data Science/Data Science Lab in Medicine/Big Data in Health Care/')
url <- "https://raw.githubusercontent.com/darthgween/BigDataInHealthCareProject/main/heart.valve.txt?token=GHSAT0AAAAAACR3GYSXO5Z3ARKVQY2S6SYSZRYZQWA"
data <- read.table(url, header = TRUE)
head(data)
# Apply the function to each variable and store results
model_results <- lapply(variables, run_cox_model)
# Print the results
model_results
# Function to plot Martingale residuals for continuous variables
plot_martingale <- function(variable) {
# Compute residuals
martingale_res <- residuals(basic_model, type = "martingale")
# Create a data frame for plotting
plot_data <- data.frame(Variable = data[[variable]], Residuals = martingale_res)
# Plot
ggplot(plot_data, aes(x = Variable, y = Residuals)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red") +
labs(title = paste("Martingale residuals vs", variable),
x = variable,
y = "Martingale Residuals")
}
# Plot Martingale residuals for 'age' and 'creat'
plot_martingale("age")
base_model <- coxph(Surv(fuyrs, status) ~ sex + age + con.cabg + creat + lv + sten.reg.mix, data = data)
summary(base_model)
# Function to plot Martingale residuals for continuous variables
plot_martingale <- function(variable) {
# Compute residuals
martingale_res <- residuals(base_model, type = "martingale")
# Create a data frame for plotting
plot_data <- data.frame(Variable = data[[variable]], Residuals = martingale_res)
# Plot
ggplot(plot_data, aes(x = Variable, y = Residuals)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red") +
labs(title = paste("Martingale residuals vs", variable),
x = variable,
y = "Martingale Residuals")
}
# Plot Martingale residuals for 'age' and 'creat'
plot_martingale("age")
plot_martingale("creat")
plot_martingale("age")
# Evaluate the performance of the models
# For calibration, discrimination, and Net Benefit, you can use specific methods like Kaplan-Meier curves, calibration plots, concordance index (C-index), and decision curve analysis (DCA).
# Example of Kaplan-Meier curves for the base model
ggsurvplot(survfit(base_model), data = data, risk.table = TRUE)
plot_martingale("age")
plot_martingale("creat")
# Check the functional form of 'age' using Martingale residuals
mart_resid_age <- resid(base_model, type = "martingale")
plot(data$age, mart_resid_age, xlab = "Age", ylab = "Martingale residuals", main = "Martingale Residuals vs Age")
abline(h = 0, col = "red")
# Check the functional form of 'creat' using Martingale residuals
mart_resid_creat <- resid(base_model, type = "martingale")
plot(data$creat, mart_resid_creat, xlab = "Creatinine Levels", ylab = "Martingale residuals", main = "Martingale Residuals vs Creatinine Levels")
abline(h = 0, col = "red")
# Checking Proportional Hazards assumption
# We use cox.zph function to perform the test
ph_test <- cox.zph(base_model)
print(ph_test)  # This will print the test results
plot(ph_test)   # This plots the Schoenfeld residuals
# Check the functional form of 'age' using Martingale residuals
mart_resid_age <- resid(base_model, type = "martingale")
plot(data$age, mart_resid_age, xlab = "Age", ylab = "Martingale residuals", main = "Martingale Residuals vs Age")
abline(h = 0, col = "red")
# Check the functional form of 'creat' using Martingale residuals
mart_resid_creat <- resid(base_model, type = "martingale")
plot(data$creat, mart_resid_creat, xlab = "Creatinine Levels", ylab = "Martingale residuals", main = "Martingale Residuals vs Creatinine Levels")
abline(h = 0, col = "red")
# Checking Proportional Hazards assumption
# We use cox.zph function to perform the test
ph_test <- cox.zph(base_model)
print(ph_test)  # This will print the test results
plot(ph_test)   # This plots the Schoenfeld residuals
# Function to check proportional hazards using Schoenfeld residuals
check_proportional_hazards <- function(model, data) {
# Calculate Schoenfeld residuals
schoenfeld_res <- cox.zph(model)
# Plot the residuals
plot(schoenfeld_res)
# Plot the residuals
plot(schoenfeld_res)
# Function to check proportional hazards using Schoenfeld residuals
check_proportional_hazards <- function(model, data) {
# Calculate Schoenfeld residuals
schoenfeld_res <- cox.zph(model)
# Plot the residuals
plot(schoenfeld_res)
}
# Check proportional hazards
check_proportional_hazards(base_model, data)
# Check proportional hazards
check_proportional_hazards(base_model, data)
# Plot Martingale residuals for 'age' and 'creat'
plot_martingale("age")
plot_martingale("creat")
# Function to run univariate Cox model and return summary
run_cox_model <- function(variable) {
formula <- as.formula(paste("Surv(fuyrs, status) ~", variable))
model <- coxph(formula, data = data)
summary(model)
}
# List of variables to test
variables <- c("log.lvmi", "sex", "age", "con.cabg", "creat", "lv", "sten.reg.mix")
# Apply the function to each variable and store results
model_results <- lapply(variables, run_cox_model)
# Print the results
model_results
#### Test linearity
# Function to plot Martingale residuals for continuous variables
plot_martingale <- function(variable) {
# Compute residuals
martingale_res <- residuals(base_model, type = "martingale")
# Create a data frame for plotting
plot_data <- data.frame(Variable = data[[variable]], Residuals = martingale_res)
# Plot
ggplot(plot_data, aes(x = Variable, y = Residuals)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red") +
labs(title = paste("Martingale residuals vs", variable),
x = variable,
y = "Martingale Residuals")
}
# Plot Martingale residuals for 'age' and 'creat'
plot_martingale("age")
plot_martingale("creat")
# Function to check proportional hazards using Schoenfeld residuals
check_proportional_hazards <- function(model, data) {
# Calculate Schoenfeld residuals
schoenfeld_res <- cox.zph(model)
# Plot the residuals
plot(schoenfeld_res)
}
# Check proportional hazards
check_proportional_hazards(base_model, data)
# Function to plot Martingale residuals for continuous variables
plot_martingale <- function(variable) {
# Compute residuals
martingale_res <- residuals(base_model, type = "martingale")
# Create a data frame for plotting
plot_data <- data.frame(Variable = data[[variable]], Residuals = martingale_res)
# Plot
ggplot(plot_data, aes(x = Variable, y = Residuals)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red") +
labs(title = paste("Martingale residuals vs", variable),
x = variable,
y = "Martingale Residuals")
}
# Plot Martingale residuals for 'age' and 'creat'
plot_martingale("age")
plot_martingale("creat")
# Function to check proportional hazards using Schoenfeld residuals
check_proportional_hazards <- function(model, data) {
# Calculate Schoenfeld residuals
schoenfeld_res <- cox.zph(model)
# Plot the residuals
plot(schoenfeld_res)
}
# Check proportional hazards
check_proportional_hazards(base_model, data)
# Check the functional form of 'age' using Martingale residuals
mart_resid_age <- resid(base_model, type = "martingale")
plot(data$age, mart_resid_age, xlab = "Age", ylab = "Martingale residuals", main = "Martingale Residuals vs Age")
abline(h = 0, col = "red")
# Check the functional form of 'creat' using Martingale residuals
mart_resid_creat <- resid(base_model, type = "martingale")
plot(data$creat, mart_resid_creat, xlab = "Creatinine Levels", ylab = "Martingale residuals", main = "Martingale Residuals vs Creatinine Levels")
abline(h = 0, col = "red")
# Checking Proportional Hazards assumption
# We use cox.zph function to perform the test
ph_test <- cox.zph(base_model)
print(ph_test)  # This will print the test results
plot(ph_test)   # This plots the Schoenfeld residuals
#### Test Proportional Hazards - Martingale and Schoenfeld
# Function to plot Martingale residuals for continuous variables - FUNCTIONAL FORM
plot_martingale <- function(variable) {
# Compute residuals
martingale_res <- residuals(base_model, type = "martingale")
# Create a data frame for plotting
plot_data <- data.frame(Variable = data[[variable]], Residuals = martingale_res)
# Plot
ggplot(plot_data, aes(x = Variable, y = Residuals)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red") +
labs(title = paste("Martingale residuals vs", variable),
x = variable,
y = "Martingale Residuals")
}
# Plot Martingale residuals for 'age' and 'creat'- FUNCTIONAL FORM
plot_martingale("age")
plot_martingale("creat")
# Function to check proportional hazards using Schoenfeld residuals - PH ASSUMPTION
check_proportional_hazards <- function(model, data) {
# Calculate Schoenfeld residuals
schoenfeld_res <- cox.zph(model)
# Plot the residuals
plot(schoenfeld_res)
}
# Check proportional hazards
check_proportional_hazards(base_model, data)
# Evaluate functional form of continuous variables using Martingale residuals
# Check for 'log.lvmi'
plot(resid(augmented_model, type = "martingale") ~ data$log.lvmi,
xlab = "Log LVMi", ylab = "Martingale Residuals", main = "Martingale Residuals vs Log LVMi")
augmented_model <- coxph(Surv(fuyrs, status) ~ sex + age + con.cabg + creat + lv + sten.reg.mix + log.lvmi, data = data)
summary(augmented_model)
# Evaluate functional form of continuous variables using Martingale residuals
# Check for 'log.lvmi'
plot(resid(augmented_model, type = "martingale") ~ data$log.lvmi,
xlab = "Log LVMi", ylab = "Martingale Residuals", main = "Martingale Residuals vs Log LVMi")
abline(h = 0, col = "red")
# Check for 'age'
plot(resid(augmented_model, type = "martingale") ~ data$age,
xlab = "Age", ylab = "Martingale Residuals", main = "Martingale Residuals vs Age")
abline(h = 0, col = "red")
# Check for 'creat'
plot(resid(augmented_model, type = "martingale") ~ data$creat,
xlab = "Creatinine Levels", ylab = "Martingale Residuals", main = "Martingale Residuals vs Creatinine Levels")
abline(h = 0, col = "red")
# Function to plot Martingale residuals for continuous variables - FUNCTIONAL FORM
plot_martingale_aug <- function(variable) {
# Compute residuals
martingale_res <- residuals(augmented_model, type = "martingale")
# Create a data frame for plotting
plot_data <- data.frame(Variable = data[[variable]], Residuals = martingale_res)
# Plot
ggplot(plot_data, aes(x = Variable, y = Residuals)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red") +
labs(title = paste("Martingale residuals vs", variable),
x = variable,
y = "Martingale Residuals")
}
# Plot Martingale residuals for 'age' and 'creat'- FUNCTIONAL FORM
plot_martingale_aug("age")
plot_martingale_aug("creat")
# Check proportional hazards
check_proportional_hazards(augmented_model, data)
# Check for 'log.lvmi'
plot(resid(augmented_model, type = "martingale") ~ data$log.lvmi,
xlab = "Log LVMi", ylab = "Martingale Residuals", main = "Martingale Residuals vs Log LVMi")
abline(h = 0, col = "red")
# Check for 'age'
plot(resid(augmented_model, type = "martingale") ~ data$age,
xlab = "Age", ylab = "Martingale Residuals", main = "Martingale Residuals vs Age")
abline(h = 0, col = "red")
# Check for 'creat'
plot(resid(augmented_model, type = "martingale") ~ data$creat,
xlab = "Creatinine Levels", ylab = "Martingale Residuals", main = "Martingale Residuals vs Creatinine Levels")
abline(h = 0, col = "red")
plot_martingale_aug("log.lvmi")
# Check the proportional hazards assumption for the augmented model
cox.zph(augmented_model)
# Plot the Schoenfeld residuals for the augmented model
plot(cox.zph(augmented_model))
# Check proportional hazards
check_proportional_hazards(augmented_model, data)
# Plot the residuals
plot(cox.zph(model))
# Plot the residuals
plot(cox.zph(base_model))
# Example of Kaplan-Meier curves for the augmented model
ggsurvplot(survfit(augmented_model), data = data, risk.table = TRUE)
# Predictions for augmented model
predict(augmented_model, newdata = data.frame(sex = c(0, 1, 0), age = c(50, 60, 80), con.cabg = c(1, 0, 1), creat = c(1.2, 1.5, 1.3), lv = c(2, 3, 1), sten.reg.mix = c(1, 3, 2), log.lvmi = c(2.5, 3.0, 2.7)), type = "risk", times = 5)
View(augmented_model)
View(univariate_models)
