```{r}
file_path <- "https://github.com/darthgween/BigDataInHealthCareProject/blob/main/heart.valve.txt"
data <- read_delim(file_path, delim = "\t")
library(ggplot2)
library(dplyr)
library(readr)
library(survival)
library(survminer)
library(randomForestSRC)
library(gbm)
file_path <- "https://github.com/darthgween/BigDataInHealthCareProject/blob/main/heart.valve.txt"
data <- read_delim(file_path, delim = "\t")
data <- read_csv(file_path, delim = "\t")
data <- read_csv(file_path)
plot(ph_test)  # This plots the Schoenfeld residuals for each covariate
### STEP 0: load libraries, etc
### STEP 1: Descriptive Statistics
### STEP 2: Univariate analysis (Cox model) of the association of each independent variable with the outcome under study
# Load necessary libraries
library(survival)
library(survminer)
# Read the dataset
data <- dataset
# Read the dataset
url <- "https://raw.githubusercontent.com/darthgween/BigDataInHealthCareProject/main/heart.valve.txt?token=GHSAT0AAAAAACR3GYSWOK6GYZRGKSSK3Z2CZRXTKPA"
data <- read.table(url, header = TRUE)
head(data)
# Convert factors to categorical variables if necessary
data$sex <- factor(data$sex, levels = c(0, 1), labels = c("Male", "Female"))
data$con.cabg <- factor(data$con.cabg, levels = c(0, 1), labels = c("No", "Yes"))
data$lv <- factor(data$lv, levels = c(1, 2, 3), labels = c("High", "Moderate", "Low"))
data$sten.reg.mix <- factor(data$sten.reg.mix, levels = c(1, 2, 3), labels = c("Stenosis", "Regurgitation", "Mixed"))
cox_log_lvmi <- coxph(Surv(fuyrs, status) ~ log.lvmi, data = data)
summary(cox_log_lvmi)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readr)
library(survival)
library(survminer)
library(corrplot)
library(utils) # For not having to load the txt each time
# This way we don't need to upload the txt file each time, it stays in the Github
file_path <- "https://raw.githubusercontent.com/darthgween/BigDataInHealthCareProject/main/heart.valve.txt?token=GHSAT0AAAAAACR3GYSWOK6GYZRGKSSK3Z2CZRXTKPA"
heart.valve <- read.table(url, header = TRUE)
head(heart.valve)
dim(heart.valve)
str(heart.valve)
summary(heart.valve)
library(dplyr)
library(corrplot)
# Escludo colonna "paz.id"
numeric_data <- heart.valve %>%
select(-paz.id) %>%
select_if(is.numeric)
# Compute correlation matrix
cor_matrix <- cor(numeric_data, use = "complete.obs")
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, addCoef.col = "black")
ggplot(heart.valve, aes(x = factor(status), y = log.lvmi, fill = factor(status))) +
geom_boxplot() +
ggtitle("Boxplot di log.lvmi per Status") +
xlab("Status (0 = Censored, 1 = Dead)") +
ylab("log.lvmi") +
scale_fill_discrete(name = "Status")
heart.valve$status <- factor(heart.valve$status, levels = c(0, 1), labels = c("Censored", "Dead"))
ggplot(heart.valve, aes(x = age, y = creat)) +
geom_point(aes(color = status), alpha = 0.6) +
geom_smooth(method = "lm", color = "red", se = FALSE) +
ggtitle("Scatter Plot: Age vs Creatinine by Status") +
xlab("Age") +
ylab("Creatinine") +
scale_color_manual(values = c("Censored" = "skyblue", "Dead" = "salmon"))
ggplot(heart.valve, aes(x = status, y = age, fill = factor(con.cabg))) +
geom_boxplot() +
ggtitle("Boxplot: Age by Status and CABG") +
xlab("Status (0 = Censored, 1 = Dead)") +
ylab("Age") +
scale_fill_manual(name = "CABG", labels = c("0" = "No", "1" = "Yes"), values = c("skyblue", "salmon"))
#livello di creatinina differenziata per status
ggplot(heart.valve, aes(x = factor(status), y = creat, fill = factor(status))) +
geom_boxplot() + xlab("Status") + ylab("Creatinine (µmol/mL)") +
scale_fill_manual(values = c("red", "green"), labels = c("Deceased", "Censored"))
# Crea lo scatter plot
ggplot(heart.valve, aes(x = age, y = fuyrs)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", se = TRUE, color = "red")
ggtitle("Scatter Plot tra Age e Fuyrs") +
xlab("Age") +
ylab("Fuyrs") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readr)
library(survival)
library(survminer)
library(randomForestSRC)
library(gbm)
library(utils) #For not having to upload the txt each time
#setwd('~/Desktop/Data Science/Data Science Lab in Medicine/Big Data in Health Care/')
url <- "https://raw.githubusercontent.com/darthgween/BigDataInHealthCareProject/main/heart.valve.txt?token=GHSAT0AAAAAACR3GYSWOK6GYZRGKSSK3Z2CZRXTKPA"
data <- read.table(url, header = TRUE)
head(data)
#TO EVALUATE
data$sex <- factor(data$sex, levels = c(0, 1), labels = c("Male", "Female"))
data$con.cabg <- factor(data$con.cabg, levels = c(0, 1), labels = c("No", "Yes"))
data$lv <- factor(data$lv, levels = c(1, 2, 3), labels = c("High", "Moderate", "Low"))
data$sten.reg.mix <- factor(data$sten.reg.mix, levels = c(1, 2, 3), labels = c("Stenosis", "Regurgitation", "Mixed"))
dim(data)
str(data)
summary(data)
ggplot(data, aes(x = age)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black") +
ggtitle("Distribuzione dell'età") +
xlab("Età") +
ylab("Frequenza")
cor_matrix <- cor(data, use = "complete.obs")
ggplot(data, aes(x = factor(status), y = log.lvmi, fill = factor(status))) +
geom_boxplot() +
ggtitle("Boxplot di log.lvmi per Status") +
xlab("Status") +
ylab("log.lvmi") +
scale_fill_discrete(name = "Status")
ggplot(data, aes(x = age, y = log.lvmi)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", color = "red", se = FALSE) +
ggtitle("Scatter Plot: età vs log.lvmi") +
xlab("Età") +
ylab("log.lvmi")
print(univariate_models[[4]]$variable)
univariate_models <- lapply(names(data)[-1], function(var) {
cox_model <- coxph(Surv(fuyrs, status) ~ data[[var]], data = data)
return(list(variable = var, model = cox_model))
})
for (item in univariate_models) {
print(item$variable)
print(summary(item$model))
}
